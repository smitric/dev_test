// Jenkinsfile for ParksMap

podTemplate(
  label: "maven-custom",
  cloud: "openshift",
  inheritFrom: "maven",
  containers: [
    containerTemplate(
      name: "jnlp",
      image: "docker-registry.default.svc:5000/${GUID}-jenkins/jenkins-slave-maven",
      resourceRequestMemory: "1Gi",
      resourceLimitMemory: "2Gi"
    )
  ]
) 

{

  node('maven-custom') {
    echo "GUID: ${GUID}"
    echo "CLUSTER: ${CLUSTER}"
    
    def appDir = "ParksMap"

    checkout scm
    
    dir(appDir)
    {
      def appName = getArtifactIdFromPom("pom.xml")
      def appVer = getVersionFromPom("pom.xml")
      def devTag  = "${appVer}-${BUILD_NUMBER}"
      def prodTag = "${appVer}"
      def devProj = "${GUID}-parks-dev"
      def prodProj = "${GUID}-parks-prod"
      def mvnCmd = "mvn -s ./nexus_settings.xml"
          
      echo "Copy modified nexus_settings.xml to current directory"
      sh "sed 's/GUID/${GUID}/' ../nexus_settings.xml > ./nexus_settings.xml"
        
      // Build app
      stage("Build") {  
          sh "${mvnCmd} clean package spring-boot:repackage -DskipTests -Dcom.redhat.xpaas.repo.redhatga"
      }

      // Run unit & code coverage analysis tests in parallel
      stage("Run Tests") {
        parallel (
          "Run unit tests": {
              sh "${mvnCmd} test"
          },
          "Run code coverage tests": {
              def SONAR_URL = "http://sonarqube.${GUID}-sonarqube.svc:9000"
              sh "${mvnCmd} sonar:sonar -Dsonar.host.url=${SONAR_URL} -Dsonar.projectName=${appName}-${devTag}"
          }
        )
      }

      stage('Build image') {
          echo "Building OpenShift container image ${appName}:${devTag}"        
          sh "oc -n ${devProj} start-build ${appName} --from-file=./target/${appName}.jar --follow"
          // tag image with version and build Number (devTag)
          openshiftTag  alias: 'false', 
                      srcStream: appName,
                      destStream: appName,
                      srcTag: 'latest',
                      destTag: devTag, 
                      namespace: devProj,
                      destinationNamespace: devProj,
                      verbose: 'false'
      }

      stage('Publish artifact to Nexus') {
          def NEXUS_URL = "http://nexus3-${GUID}-nexus.apps.${CLUSTER}/repository/releases"
          sh "${mvnCmd} deploy -DskipTests=true -DaltDeploymentRepository=nexus::default::${NEXUS_URL}"
      }

      stage('Deploy to Dev') {
          echo "Deploying image to DevProj"                    
          sh "oc -n ${devProj} set image dc/${appName} ${appName}=docker-registry.default.svc:5000/${devProj}/${appName}:${devTag}"
          // sh "oc -n ${devProj} rollout latest dc/${appName} && oc rollout status dc/${APP_NAME} -w "
          // Alternative solution using OC Jenkins Plugin
          openshiftDeploy namespace: devProj, depCfg: appName,  verbose: 'false', waitTime: '', waitUnit: 'sec'
          openshiftVerifyDeployment namespace: devProj, depCfg: appName, replicaCount: '1', verbose: 'false', verifyReplicaCount: 'false', waitTime: '', waitUnit: 'sec'
          openshiftVerifyService namespace: devProj, svcName: appName, verbose: 'false'
      }

      stage('Copy Image to Nexus Docker Registry') {
          sh """skopeo copy \
                --src-tls-verify=false \
                --dest-tls-verify=false \
                --src-creds openshift:\$(oc whoami -t) \
                --dest-creds admin:admin123 \
                docker://docker-registry.default.svc.cluster.local:5000/${devProj}/${appName}:${devTag} \
                docker://nexus3-registry.${GUID}-nexus.svc.cluster.local:5000/${appName}:${devTag}
             """
      }
      stage('Tag Image for production') {
          // Tag image with prod tag
          openshiftTag  alias: 'false', 
                        srcStream: appName,
                        destStream: appName, 
                        srcTag: devTag,
                        destTag: prodTag, 
                        namespace: devProj,
                        destinationNamespace: prodProj, 
                        verbose: 'false'
      }

      stage('Blue/Green deployment to prod') {
          curApp = sh(returnStdout: true, script: "oc -n ${prodProj} get route ${appName} -o jsonpath='{ .spec.to.name }'").trim()
          if (curApp == "${appName}-green") {
            newApp = "${appName}-blue"
          }
          else {
            newApp = "${appName}-green"
          }
        
          echo "Active app: ${curApp}"
          echo "New app: ${newApp}"

          // Update prod DC with new image
          sh "oc -n ${prodProj} set image dc/${newApp} ${newApp}=docker-registry.default.svc:5000/${prodProj}/${appName}:${prodTag}"

          // Deploy non-active app
          openshiftDeploy namespace: prodProj, depCfg: newApp, verbose: 'false', waitTime: '', waitUnit: 'sec'
          openshiftVerifyDeployment namespace: prodProj, depCfg: newApp, replicaCount: '1', verbose: 'false', verifyReplicaCount: 'true', waitTime: '', waitUnit: 'sec'
          openshiftVerifyService namespace: prodProj, svcName: newApp, verbose: 'false'
      }

      stage('Switch apps in prod') {
          sh "oc -n ${prodProj} patch route ${appName} -p '{\"spec\":{\"to\":{\"name\":\"${newApp}\"}}}'"
      }

    }
}
}

// Convenience Functions to read variables from the pom.xml
// Do not change anything below this line.
def getVersionFromPom(pom) {
  def matcher = readFile(pom) =~ '<version>(.+)</version>'
  matcher ? matcher[0][1] : null
}
def getGroupIdFromPom(pom) {
  def matcher = readFile(pom) =~ '<groupId>(.+)</groupId>'
  matcher ? matcher[0][1] : null
}
def getArtifactIdFromPom(pom) {
  def matcher = readFile(pom) =~ '<artifactId>(.+)</artifactId>'
  matcher ? matcher[0][1] : null
}
